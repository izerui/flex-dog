<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:components="com.github.izerui.file.components.*"
                layout="vertical"
                creationComplete="loadData()"
                showCloseButton="true"
                width="{this.parentApplication.width - 100}"
                height="{this.parentApplication.height - 100}"
                close="PopUpManager.removePopUp(this);"
                title="货品: {inventory.inventoryCode} {inventory.inventoryName} 需求日志记录"
                keyDown="if(event.charCode == Keyboard.ESCAPE) PopUpManager.removePopUp(this);">

    <mx:DataGrid id="grid" width="100%" height="100%" variableRowHeight="true" dataProvider="{page.content}"
                 doubleClickEnabled="true" itemDoubleClick="view()">
        <mx:columns>
            <mx:DataGridColumn dataField="index"
                               headerText="序号"
                               labelFunction="indexNumLabelFun"
                               textAlign="center"
                               width="40"/>
            <mx:DataGridColumn dataField="bomCode" width="80" textAlign="center"
                               headerText="BOM">
                <mx:itemRenderer>
                    <fx:Component>
                        <mx:LinkButton buttonMode="true" useHandCursor="true" color="#6c7dc7" label="{data.bomId}"
                                       click="viewBom()">
                            <fx:Script>
                                <![CDATA[
                                import mx.core.Application;
                                import mx.managers.PopUpManager;

                                private function viewBom():void {
                                    if (!data.bomId) {
                                        return;
                                    }
                                    var bomList:BomList = new BomList();
                                    bomList.inventory = data;
                                    bomList.setFocus();

                                    PopUpManager.addPopUp(bomList, Application.application as DisplayObject, true);
                                    PopUpManager.centerPopUp(bomList);
                                }
                                ]]>
                            </fx:Script>
                        </mx:LinkButton>
                    </fx:Component>
                </mx:itemRenderer>
            </mx:DataGridColumn>
            <mx:DataGridColumn dataField="businessKey" textAlign="center"
                               headerText="业务主键">
                <mx:itemRenderer>
                    <fx:Component>
                        <mx:LinkButton buttonMode="true" useHandCursor="true" color="#6c7dc7" label="{data.businessKey}"
                                       click="viewBusiness()">
                            <fx:Script>
                                <![CDATA[
                                import mx.core.Application;
                                import mx.managers.PopUpManager;

                                private function viewBusiness():void {
                                    var demandLog:BusinessDemandLog = new BusinessDemandLog();
                                    demandLog.selItem = data;
                                    demandLog.setFocus();

                                    PopUpManager.addPopUp(demandLog, Application.application as DisplayObject, true);
                                    PopUpManager.centerPopUp(demandLog);
                                }
                                ]]>
                            </fx:Script>
                        </mx:LinkButton>
                    </fx:Component>
                </mx:itemRenderer>
            </mx:DataGridColumn>
            <mx:DataGridColumn dataField="businessDocNo" width="120" textAlign="center"
                               headerText="订单号"/>
            <mx:DataGridColumn dataField="businessTypeName" textAlign="center"
                               headerText="订单类型"/>
            <mx:DataGridColumn dataField="remark" textAlign="center"
                               headerText="动作">
                <mx:itemRenderer>
                    <fx:Component>
                        <mx:LinkButton buttonMode="true" useHandCursor="true" color="#6c7dc7" label="{data.remark}"
                                       click="viewSourceLog()">
                            <fx:Script>
                                <![CDATA[
                                import mx.core.Application;
                                import mx.managers.PopUpManager;

                                private function viewSourceLog():void {
                                    var demandLog:SourceDemandLog = new SourceDemandLog();
                                    demandLog.selItem = data;
                                    demandLog.setFocus();

                                    PopUpManager.addPopUp(demandLog, Application.application as DisplayObject, true);
                                    PopUpManager.centerPopUp(demandLog);
                                }
                                ]]>
                            </fx:Script>
                        </mx:LinkButton>
                    </fx:Component>
                </mx:itemRenderer>
            </mx:DataGridColumn>
            <mx:DataGridColumn dataField="attributeName" textAlign="center"
                               headerText="货品属性"/>
            <mx:DataGridColumn dataField="unitName" textAlign="center"
                               headerText="单位"/>
            <mx:DataGridColumn dataField="changeDemandQty" textAlign="center" color="#026c6e"
                               labelFunction="demandChangeLabelFun"
                               headerText="需求改变量"/>
            <mx:DataGridColumn dataField="demandQty" textAlign="center" labelFunction="demandLabelFun"
                               headerText="单需/总需"/>
            <mx:DataGridColumn dataField="changePurgeQty" textAlign="center" color="#b77219"
                               labelFunction="purgeChangeLabelFun"
                               headerText="净需改变量"/>
            <mx:DataGridColumn dataField="purgeQty" textAlign="center" labelFunction="purgeLabelFun"
                               headerText="单净需/总净需"/>
            <mx:DataGridColumn dataField="stockQty" textAlign="center"
                               headerText="库存量">
                <mx:itemRenderer>
                    <fx:Component>
                        <mx:LinkButton buttonMode="true" useHandCursor="true" color="#6c7dc7"
                                       label="{data.stockQty}"
                                       click="viewStock()">
                            <fx:Script>
                                <![CDATA[
                                import mx.core.Application;
                                import mx.managers.PopUpManager;

                                private function viewStock():void {
                                    var demandLog:InventoryStockLog = new InventoryStockLog();
                                    demandLog.inventory = data;
                                    demandLog.setFocus();

                                    PopUpManager.addPopUp(demandLog, Application.application as DisplayObject, true);
                                    PopUpManager.centerPopUp(demandLog);
                                }
                                ]]>
                            </fx:Script>
                        </mx:LinkButton>
                    </fx:Component>
                </mx:itemRenderer>
            </mx:DataGridColumn>
            <mx:DataGridColumn dataField="usableQty" textAlign="center"
                               headerText="可用量"/>
            <mx:DataGridColumn dataField="createTime" width="120" textAlign="center"
                               labelFunction="dateLabelFun"
                               headerText="时间"/>
        </mx:columns>
    </mx:DataGrid>
    <mx:ControlBar>
        <mx:LinkBar id="linkButtonBar" iconField="ico" horizontalAlign="right" itemClick="pageClick(event)">
            <mx:dataProvider>
                <mx:ArrayCollection>
                    <fx:Object label="首页" itemData="0" ico="@Embed('/assets/img/bar_img/resultset_first.png')"/>
                    <fx:Object label="上一页" itemData="1" ico="@Embed('/assets/img/bar_img/resultset_previous.png')"/>
                    <fx:Object label="下一页" itemData="2" ico="@Embed('/assets/img/bar_img/resultset_next.png')"/>
                    <fx:Object label="末页" itemData="3" ico="@Embed('/assets/img/bar_img/resultset_last.png')"/>
                </mx:ArrayCollection>
            </mx:dataProvider>
        </mx:LinkBar>
        <mx:Label text="{page.number + 1} / {page.totalPages} 页"/>
        <mx:Label text="共 {page.totalElements} 条记录"/>
        <mx:Label text="按订单搜索:"/>
        <components:SearchInput id="searchKey" width="200" textChange="filterResult()"/>
    </mx:ControlBar>
    <fx:Script><![CDATA[
        import com.github.izerui.file.controls.titlewin.DetailTitleWindow;
        import com.github.izerui.file.utils.RemoteObjectUtils;

        import mx.core.FlexGlobals;
        import mx.events.ItemClickEvent;
        import mx.formatters.DateFormatter;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;
        import mx.utils.ObjectUtil;

        [Bindable]
        public var inventory:Object;

        [Bindable]
        protected var page:Object = {
            number: 0,
            size: 50,
            totalPages: 0,
            totalElements: 0,
            content: []
        };

        private function loadData():void {
            RemoteObjectUtils.execute("demandService", "inventoryDemandsHistory", function (event:ResultEvent) {
                page = event.result;
                filterResult();
            }, inventory.entCode, inventory.inventoryId, inventory.businessKey, null, page.number, page.size)

        }

        private function demandChangeLabelFun(item:Object, column:DataGridColumn):String {
            if (item.changeDemandQty > 0) {
                return "+" + item.changeDemandQty;
            } else if (item.changeDemandQty == 0) {
                return "";
            } else {
                return "" + item.changeDemandQty;
            }
        }

        private function demandLabelFun(item:Object, column:DataGridColumn):String {
            return item.demandQty + " / " + item.totalDemandQty;
        }

        private function purgeChangeLabelFun(item:Object, column:DataGridColumn):String {
            if (item.changePurgeQty > 0) {
                return "+" + item.changePurgeQty;
            } else if (item.changePurgeQty == 0) {
                return "";
            } else {
                return "" + item.changePurgeQty;
            }
        }

        private function purgeLabelFun(item:Object, column:DataGridColumn):String {
            return item.purgeQty + " / " + item.totalPurgeQty;
        }

        private function dateLabelFun(item:Object, column:DataGridColumn):String {
            var df:DateFormatter = new DateFormatter();
            df.formatString = "YYYY-MM-DD JJ:NN:SS";
            return df.format(item.createTime);
        }

        private function pageClick(event:ItemClickEvent):void {
            switch (event.item["itemData"]) {
                case 0: {
                    page.number = 0;
                    break;
                }
                case 1: {
                    page.number--;
                    break;
                }
                case 2: {
                    page.number++;
                    break;
                }
                case 3: {
                    page.number = page.totalPages - 1;
                    break;
                }
            }
            if (page.number == page.totalPages) {
                page.number = page.totalPages - 1;
            }
            if (page.number < 0) {
                page.number = 0;
            }
            loadData();
        }

        private function view():void {
            if (grid.selectedIndex == -1) {
                return;
            }
            var popUp:DetailTitleWindow = new DetailTitleWindow();
            popUp.output = JSON.stringify(grid.selectedItem, null, "  ");
            popUp.setFocus();
            PopUpManager.addPopUp(popUp, FlexGlobals.topLevelApplication as DisplayObjectContainer, true)
            PopUpManager.centerPopUp(popUp)
//            var copyText:String = JSON.stringify(grid.selectedItem);
//            System.setClipboard(copyText);
        }

        private function indexNumLabelFun(item:Object, column:DataGridColumn):String {
            var indexNum:int = (page.content.getItemIndex(item) + 1);
            return indexNum.toString();
        }

        private function filterResult():void {
            if (!searchKey.text) {
                grid.dataProvider = page.content;
                return;
            }
            var tempSearchList:ArrayCollection = new ArrayCollection;

            for each (var fi:Object in page.content) {
                if (fi.businessKey.indexOf(searchKey.text) != -1 || fi.businessDocNo.indexOf(searchKey.text) != -1) {
                    tempSearchList.addItem(ObjectUtil.clone(fi));
                }
            }
            grid.dataProvider = tempSearchList;
        }
        ]]>
    </fx:Script>
</mx:TitleWindow>
